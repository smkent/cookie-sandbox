name: Set up Python project with Poetry

inputs:
  python_version:
    description: "Python version to install"
    required: false
    default: "3.11"
  poetry_version:
    description: "Poetry version to install"
    required: false
    default: "1.2"
  coverage:
    description: "Upload coverage report"
    required: false
    default: false
  update:
    description: "Update project dependencies"
    required: false
    default: false

runs:
  using: composite
  steps:
    - name: ✨ Install Poetry
      shell: bash
      run: |
        python3 -m pip install \
            "poetry==${{ inputs.poetry_version }}.*" \
            "poetry-dynamic-versioning"
        python3 -m pip install --upgrade requests

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      id: setuppy
      with:
        python-version: ${{ inputs.python_version }}
        cache: poetry

    - name: 🛠️ Install project dependencies
      shell: bash
      env:
        # https://github.com/python-poetry/poetry/issues/1917
        # https://github.com/actions/runner-images/issues/6185
        PYTHON_KEYRING_BACKEND: "keyring.backends.null.Keyring"
      run: |
        poetry install
        poetry lock --check
        [ "$(poetry version -s)" != "0.0.0" ] \
            || { echo "Versioning broken"; exit 1; }

    - name: 🆙 Update project dependencies
      shell: bash
      env:
        # https://github.com/python-poetry/poetry/issues/1917
        # https://github.com/actions/runner-images/issues/6185
        PYTHON_KEYRING_BACKEND: "keyring.backends.null.Keyring"
      run: |
        poetry update --no-cache
        poetry run pre-commit autoupdate
      if: inputs.update == 'true'

    - name: 🪝 Cache pre-commit hooks
      uses: actions/cache@v3
      with:
        path: ~/.cache/pre-commit
        key: "pre-commit-${{ runner.os }}-python\
          -${{ steps.setuppy.outputs.python-version }}\
          -${{ hashFiles('.pre-commit-config.yaml') }}"

    - name: 🔥 Test
      shell: bash
      run: poetry run poe test

    - name: 🚒 Create test summary
      uses: test-summary/action@v2
      if: success() || failure()
      with:
        paths: ./.pytest_results.xml

    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: inputs.coverage == 'true'
      with:
        fail_ci_if_error: true
        files: ./.pytest_coverage.xml

    - name: 📦 Build package
      shell: bash
      run: poetry build
